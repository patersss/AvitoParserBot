import asyncio
import logging
import configparser
from datetime import datetime, timedelta
from typing import Dict
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeDefault
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from models.database import async_session
from models.User import User
from models.Task import Task
from models.Post import Post
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    logger.info("–ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    raise

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, Dict] = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç —á–∞—Ç–∞ {chat_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        async with async_session() as session:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
            query = select(User).where(User.chat_id == chat_id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {chat_id}")
                user = User(
                    name=message.from_user.username,
                    chat_id=chat_id
                )
                session.add(user)
                await session.commit()
            elif user.name != message.from_user.username:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è chat_id {chat_id}")
                user.name = message.from_user.username
                await session.commit()
        
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ê–≤–∏—Ç–æ.\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –ê–≤–∏—Ç–æ, –∏ —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á\n"
        "/remove - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "2. –°—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –ê–≤–∏—Ç–æ\n"
        "3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "4. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–º–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç)\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:\n"
        "‚Ä¢ –í —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á (/list) –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "  - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"
    )
    await message.answer(help_text)
    logger.info(f"–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")

@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /list –æ—Ç —á–∞—Ç–∞ {chat_id}")
    
    async with async_session() as session:
        query_for_user = select(User).where(User.chat_id == chat_id)
        result_for_user = await session.execute(query_for_user)
        user_id = result_for_user.scalar_one().id

        query = select(Task).where(Task.app_user_id == user_id, Task.is_active == True)
        result = await session.execute(query)
        tasks = result.scalars().all()
        
        if not tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return
        
        await message.answer("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for task in tasks:
            response = (
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task.task_name}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {task.url}\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {task.end_date}\n"
                f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {task.interval} –º–∏–Ω—É—Ç\n"
                f"üìä ID –∑–∞–¥–∞—á–∏: {task.id}\n\n"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{task.id}"),
                    InlineKeyboardButton(text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"edit_interval_{task.id}")
                ]
            ])
            await message.answer(response, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('edit_name_'))
async def process_edit_name(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    chat_id = callback_query.message.chat.id
    task_id = int(callback_query.data.split('_')[-1])
    
    user_states[chat_id] = {
        "state": "waiting_new_name",
        "task_id": task_id
    }
    
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ (–æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await callback_query.answer()

@dp.message(lambda message: message.chat.id in user_states and user_states[message.chat.id]["state"] == "waiting_new_name")
async def process_new_name(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    chat_id = message.chat.id
    task_id = user_states[chat_id]["task_id"]
    new_name = message.text.strip()
    
    if len(new_name) < 3 or len(new_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    async with async_session() as session:
        task = await session.get(Task, task_id)
        if task:
            old_name = task.task_name
            task.task_name = new_name
            await session.commit()
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_name}' –Ω–∞ '{new_name}'")
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –≤ —á–∞—Ç–µ {chat_id}")
        else:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    
    del user_states[chat_id]

@dp.callback_query(lambda c: c.data.startswith('edit_interval_'))
async def process_edit_interval(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    chat_id = callback_query.message.chat.id
    task_id = int(callback_query.data.split('_')[-1])
    
    user_states[chat_id] = {
        "state": "waiting_new_interval",
        "task_id": task_id
    }
    
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–º–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç):"
    )
    await callback_query.answer()

@dp.message(lambda message: message.chat.id in user_states and user_states[message.chat.id]["state"] == "waiting_new_interval")
async def process_new_interval(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    chat_id = message.chat.id
    task_id = user_states[chat_id]["task_id"]
    
    try:
        new_interval = int(message.text)
        if new_interval < 10:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç.")
        return
    
    async with async_session() as session:
        task = await session.get(Task, task_id)
        if task:
            old_interval = task.interval
            task.interval = new_interval
            await session.commit()
            await message.answer(
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task.task_name}' –∏–∑–º–µ–Ω–µ–Ω —Å {old_interval} –Ω–∞ {new_interval} –º–∏–Ω—É—Ç"
            )
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–¥–∞—á–∏ {task_id} –≤ —á–∞—Ç–µ {chat_id}")
        else:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    
    del user_states[chat_id]

@dp.message(Command("remove"))
async def cmd_remove(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove"""
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /remove –æ—Ç —á–∞—Ç–∞ {chat_id}")
    
    async with async_session() as session:
        query_for_user = select(User).where(User.chat_id == chat_id)
        result_for_user = await session.execute(query_for_user)
        user_id = result_for_user.scalar_one().id

        query = select(Task).where(Task.app_user_id == user_id, Task.is_active == True)
        result = await session.execute(query)
        tasks = result.scalars().all()
        
        if not tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {task.task_name}", callback_data=f"remove_{task.id}")]
            for task in tasks
        ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('remove_'))
async def process_remove(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    chat_id = callback_query.message.chat.id
    task_id = int(callback_query.data.split('_')[-1])
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
    
    async with async_session() as session:
        task = await session.get(Task, task_id)
        if task:
            task_name = task.task_name
            task.is_active = False
            await session.commit()
            await callback_query.message.answer(f"–ó–∞–¥–∞—á–∞ '{task_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}")
        else:
            await callback_query.message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ.")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É {task_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
    
    await callback_query.answer()

@dp.message(Command("add"))
async def cmd_add(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /add –æ—Ç —á–∞—Ç–∞ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    async with async_session() as session:
        query_for_user = select(User).where(User.chat_id == chat_id)
        result_for_user = await session.execute(query_for_user)
        user_id = result_for_user.scalar_one().id
        query = select(Task).where(Task.app_user_id == user_id, Task.is_active == True)
        result = await session.execute(query)
        active_tasks = result.scalars().all()
        
        if len(active_tasks) >= 5:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á (5).")
            return
    
    user_states[chat_id] = {"state": "waiting_name"}
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏:")

@dp.message(lambda message: message.chat.id in user_states and user_states[message.chat.id]["state"] == "waiting_name")
async def process_name(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    chat_id = message.chat.id
    task_name = message.text.strip()
    
    if len(task_name) < 3 or len(task_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    user_states[chat_id].update({
        "task_name": task_name,
        "state": "waiting_url"
    })
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –ê–≤–∏—Ç–æ.")

@dp.message(lambda message: message.chat.id in user_states and user_states[message.chat.id]["state"] == "waiting_url")
async def process_url(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    url = message.text
    
    if not url.startswith("https://www.avito.ru/"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ê–≤–∏—Ç–æ.")
        return
    
    user_states[chat_id].update({
        "url": url,
        "state": "waiting_days"
    })
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (1-30):")

@dp.message(lambda message: message.chat.id in user_states and user_states[message.chat.id]["state"] == "waiting_days")
async def process_days(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    chat_id = message.chat.id
    
    try:
        days = int(message.text)
        if not 1 <= days <= 30:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")
        return
    
    user_states[chat_id].update({
        "days": days,
        "state": "waiting_interval"
    })
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–º–∏–Ω–∏–º—É–º 10):")

@dp.message(lambda message: message.chat.id in user_states and user_states[message.chat.id]["state"] == "waiting_interval")
async def process_interval(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    chat_id = message.chat.id
    
    try:
        interval = int(message.text)
        if interval < 10:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        result = await session.execute(select(User).where(User.chat_id == chat_id))
        user_id = result.scalar_one().id
        task = Task(
            app_user_id=user_id,
            task_name=user_states[chat_id]["task_name"],
            url=user_states[chat_id]["url"],
            end_date=datetime.now() + timedelta(days=user_states[chat_id]["days"]),
            interval=interval,
            is_active=True,
            next_run_at=datetime.now() - timedelta(minutes=2)
        )
        session.add(task)
        await session.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    await message.answer(
        "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[chat_id]['task_name']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {user_states[chat_id]['url']}\n"
        f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {datetime.now() + timedelta(days=user_states[chat_id]['days'])}\n"
        f"‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[chat_id]

async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(
            command="start",
            description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
        ),
        BotCommand(
            command="help",
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        ),
        BotCommand(
            command="add",
            description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
        ),
        BotCommand(
            command="list",
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á"
        ),
        BotCommand(
            command="remove",
            description="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
        )
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_commands(bot)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise
