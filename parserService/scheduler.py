import asyncio
import os
import threading
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from models.database import get_db, async_session, init_db
from models.Task import Task
from models.Post import Post
from models.User import User
import aiogram
from aiogram import Bot
import configparser
import logging
from avito_parser import AvitoParser
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=BOT_TOKEN)

class ParserWorker:
    def __init__(self, task: Task, session: AsyncSession):
        self.task = task
        self.session = session
        self.user = None

    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
        try:
            result = await self.session.execute(
                select(User).where(User.id == self.task.app_user_id)
            )
            self.user = result.scalar_one()
            if not self.user:
                raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {self.task.app_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞: {str(e)}", exc_info=True)
            raise

    async def process_task(self):
        try:
            await self.init()
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ {self.task.id} –¥–ª—è URL: {self.task.url}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
            parser = AvitoParser(self.task, self.session)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            new_posts = await parser.parse()
            
            if new_posts:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_posts)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {self.task.id}")
                for post in new_posts:
                    message = f"üè† {post['name']}\n"
                    message += f"üí∞ –¶–µ–Ω–∞: {post['price']}\n\n"
                    message += f"üîó {post['url']}\n"
                    await bot.send_message(
                        chat_id=self.user.chat_id,
                        text=message,
                        parse_mode='HTML'
                    )
            else:
                logger.info(f"–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {self.task.id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            current_time = datetime.now()
            self.task.next_run_at = current_time.replace(microsecond=0) + timedelta(minutes=self.task.interval)
            self.task.last_run_at = current_time.replace(microsecond=0)
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {self.task.id}: {self.task.next_run_at}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ
            await self.session.commit()
            logger.info(f"–ó–∞–¥–∞—á–∞ {self.task.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ {self.task.next_run_at}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {self.task.id}: {str(e)}", exc_info=True)
            await self.session.rollback()
            raise

class TaskScheduler:
    def __init__(self):
        self.running_tasks = set()

    async def get_tasks_to_run(self, session: AsyncSession) -> list[Task]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å"""
        try:
            current_time = datetime.now()
            result = await session.execute(
                select(Task).where(
                    Task.next_run_at <= current_time, #–ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏  
                    Task.end_date >= current_time, #–ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                    Task.is_active == True #–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
                )
            )
            tasks = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return tasks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
            raise

    async def run_task(self, task: Task):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if task.id in self.running_tasks:
            logger.warning(f"–ó–∞–¥–∞—á–∞ {task.id} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return

        self.running_tasks.add(task.id)
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
            async with async_session() as parser_session:
                parser = AvitoParser(task, parser_session)
                new_posts = await parser.parse()

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            async with async_session() as task_session:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∑–∞–¥–∞—á–∏
                    result = await task_session.execute(
                        select(Task).where(Task.id == task.id)
                    )
                    current_task = result.scalar_one()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    current_time = datetime.now().replace(microsecond=0)
                    current_task.next_run_at = current_time + timedelta(minutes=current_task.interval)
                    current_task.last_run_at = current_time
                    
                    logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ {current_task.id}:")
                    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
                    logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {current_task.next_run_at}")
                    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {current_task.last_run_at}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ
                    await task_session.commit()
                    logger.info(f"–ó–∞–¥–∞—á–∞ {current_task.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö
                    if new_posts:
                        user = None
                        async with async_session() as user_session:
                            try:
                                result = await user_session.execute(
                                    select(User).where(User.id == current_task.app_user_id)
                                )
                                user = result.scalar_one()
                                if user:
                                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {10 if len(new_posts) >= 10 else len(new_posts) } —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                                    for number, post in enumerate(new_posts):
                                        
                                        if number >= 10: 
                                            break

                                        message = f"üè† {post['name']}\n"
                                        message += f"üí∞ –¶–µ–Ω–∞: {post['price']}\n\n"
                                        message += f"üîó {post['url']}\n"
                                        await bot.send_message(
                                            chat_id=user.chat_id,
                                            text=message,
                                            parse_mode='HTML'
                                        )
                                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)
                                await user_session.rollback()
                                raise
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {str(e)}", exc_info=True)
                    await task_session.rollback()
                    raise

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {str(e)}", exc_info=True)
            raise
        finally:
            self.running_tasks.remove(task.id)

    async def process_tasks(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        try:
            async with async_session() as session:
                tasks = await self.get_tasks_to_run(session)
                if tasks:
                    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º {len(tasks)} –∑–∞–¥–∞—á")
                    await asyncio.gather(*[self.run_task(task) for task in tasks])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á")
        while True:
            try:
                await self.process_tasks()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}", exc_info=True)
            
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)

async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = TaskScheduler()
        await scheduler.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}", exc_info=True)
        exit(1) 